<?xml version="1.0" encoding="UTF-8"?>
<model version="5.2.1" links="0">
 <documentation>This is the modified Blinky example for the Arduino-UNO board, which blinks the on-board LED (L) once per second. The example demonstrates:

1. One active object class &quot;LedOnOff&quot; (inside the package &quot;AOs&quot;)
2. A simple state machine</documentation>
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="LedOnOff" superclass="qpn::QActive">
   <statechart properties="0x01">
    <initial target="../1">
     <action>QActive_armX((QActive *)me, 0U, BSP_TICKS_PER_SEC/2U, BSP_TICKS_PER_SEC/2U);
Serial.begin(9600);
pinMode(LED_BUILTIN, OUTPUT);</action>
     <initial_glyph conn="2,3,5,0,14,5">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="off">
     <entry brief="LED off">digitalWrite(LED_L, LOW);
Serial.println(freeMemory());</entry>
     <tran trig="Q_TIMEOUT" target="../../2">
      <tran_glyph conn="10,19,2,0,8">
       <action box="0,0,11,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="6,8,22,11">
      <entry box="1,2,17,4"/>
     </state_glyph>
    </state>
    <state name="on">
     <entry brief="LED on">digitalWrite(LED_L, HIGH);</entry>
     <tran trig="Q_TIMEOUT" target="../../1">
      <tran_glyph conn="23,27,0,2,-8">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="6,27,22,10">
      <entry box="1,2,15,4"/>
     </state_glyph>
    </state>
    <state_diagram size="38,47"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="LedOnOff_Qpn.ino">
   <text>#include &quot;qpn.h&quot;     // QP-nano framework for Arduino

#include &quot;Arduino.h&quot;  // Main include file for the Arduino SDK

#include &quot;FreeMemory.h&quot;

//============================================================================
// declare all AO classes...
$declare${AOs::LedOnOff}
//...

// AO instances and event queue buffers for them...
LedOnOff AO_LedOnOff;
static QEvt l_ledOnOffQSto[10]; // Event queue storage for LedOnOff
//...

//============================================================================
// QF_active[] array defines all active object control blocks ----------------
QActiveCB const Q_ROM QF_active[] = {
    { (QActive *)0,           (QEvt *)0,        0U                  },
    { (QActive *)&amp;AO_LedOnOff,  l_ledOnOffQSto,     Q_DIM(l_ledOnOffQSto) }
};

//============================================================================
// various constants for the application...
enum {
    BSP_TICKS_PER_SEC = 100, // number of system clock ticks in one second
    LED_L = 13               // the pin number of the on-board LED (L)
};

//............................................................................
void setup() {
    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));

    // initialize all AOs...
    QActive_ctor(&amp;AO_LedOnOff.super, Q_STATE_CAST(&amp;LedOnOff_initial));

    // initialize the hardware used in this sketch...
    pinMode(LED_L, OUTPUT); // set the LED-L pin to output
}

//............................................................................
void loop() {
    QF_run(); // run the QF-nano framework
}

//============================================================================
// interrupts...
ISR(TIMER2_COMPA_vect) {
    QF_tickXISR(0); // process time events for tick rate 0
}

//============================================================================
// QF callbacks...
void QF_onStartup(void) {
    // set Timer2 in CTC mode, 1/1024 prescaler, start the timer ticking...
    TCCR2A = (1U &lt;&lt; WGM21) | (0U &lt;&lt; WGM20);
    TCCR2B = (1U &lt;&lt; CS22 ) | (1U &lt;&lt; CS21) | (1U &lt;&lt; CS20); // 1/2^10
    ASSR  &amp;= ~(1U &lt;&lt; AS2);
    TIMSK2 = (1U &lt;&lt; OCIE2A); // enable TIMER2 compare Interrupt
    TCNT2  = 0U;

    // set the output-compare register based on the desired tick frequency
    OCR2A  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
}
//............................................................................
void QV_onIdle(void) {   // called with interrupts DISABLED
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 &lt;&lt; SM0) | (1 &lt;&lt; SE); // idle mode, adjust to your project
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
}
//............................................................................
Q_NORETURN Q_onAssert(char const Q_ROM * const module, int location) {
    // implement the error-handling policy for your application!!!
    (void)module;
    (void)location;
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET();  // reset the CPU
    for (;;) {
    }
}

//============================================================================
// define all AO classes (state machine)...
$define${AOs::LedOnOff}
//...
</text>
  </file>
  <file name="FreeMemory.h">
   <text>// Copied from:
// https://learn.adafruit.com/memories-of-an-arduino/measuring-free-memory

#ifndef __FREEMEMORY_H
#define __FREEMEMORY_H

#ifdef __arm__
// should use uinstd.h to define sbrk but Due causes a conflict
extern &quot;C&quot; char* sbrk(int incr);
#else  // __ARM__
extern char *__brkval;
#endif  // __arm__

int freeMemory() {
  char top;
#ifdef __arm__
  return &amp;top - reinterpret_cast&lt;char*&gt;(sbrk(0));
#elif defined(CORE_TEENSY) || (ARDUINO &gt; 103 &amp;&amp; ARDUINO != 151)
  return 1 + (&amp;top - __brkval);
#else  // __arm__
  return 1 + (__brkval ? &amp;top - __brkval : &amp;top - __malloc_heap_start);
#endif  // __arm__
}

#endif</text>
  </file>
 </directory>
</model>
